app:
  description: 通过MCP调用工具提取LCA数据库里的flows
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 2.流数据获取 (通过MCP)
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/zhipuai:0.0.15@0fe895dabd88378b75fbd5a8b437b329094f9867de3db901dfee31945b30bd08
kind: app
version: 0.4.0
workflow:
  conversation_variables: []
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 100
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10000
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: if-else
      id: 1758074244330-source-1758130999431-target
      source: '1758074244330'
      sourceHandle: source
      target: '1758130999431'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1758130999431-false-1757735791088-target
      source: '1758130999431'
      sourceHandle: 'false'
      target: '1757735791088'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1757735791088-source-1759133897723-target
      source: '1757735791088'
      sourceHandle: source
      target: '1759133897723'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1759133897723-source-1757485441312-target
      source: '1759133897723'
      sourceHandle: source
      target: '1757485441312'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: if-else
        targetType: code
      id: 1758130999431-true-1760335091488-target
      source: '1758130999431'
      sourceHandle: 'true'
      target: '1760335091488'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1760335091488-source-1758131027101-target
      source: '1760335091488'
      sourceHandle: source
      target: '1758131027101'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: agent
      id: 1757154253960-source-1760348527985-target
      source: '1757154253960'
      sourceHandle: source
      target: '1760348527985'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: agent
        targetType: code
      id: 1760348527985-source-1758074244330-target
      source: '1760348527985'
      sourceHandle: source
      target: '1758074244330'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: flow_name
          max_length: null
          options: []
          required: true
          type: paragraph
          variable: flow_name
        - allowed_file_extensions:
          - .md
          allowed_file_types:
          - custom
          allowed_file_upload_methods:
          - local_file
          label: paper
          max_length: null
          options: []
          required: true
          type: paragraph
          variable: paper
        - label: process_name
          max_length: null
          options: []
          required: true
          type: paragraph
          variable: process_name
      height: 141
      id: '1757154253960'
      position:
        x: -2048.536856017004
        y: 491.7010074358485
      positionAbsolute:
        x: -2048.536856017004
        y: 491.7010074358485
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1759133897723'
          - result
          value_type: array[string]
          variable: final_exchange
        selected: false
        title: End
        type: end
      height: 89
      id: '1757485441312'
      position:
        x: -147.15658547001186
        y: 571.2161465558643
      positionAbsolute:
        x: -147.15658547001186
        y: 571.2161465558643
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params: {}
          mode: chat
          name: glm-4.5
          provider: langgenius/zhipuai/zhipuai
        prompt_template:
        - id: 407095a9-7dc4-4b95-b240-153fc8803f41
          role: system
          text: '基于【当前 Process 信息】与【文献】，精确定义【原始查询的flow_name】在该 Process 上下文中的含义、属性或约束，并从【候选
            Flow 列表】中选择唯一一个最匹配的 Flow，返回标准化信息与简明理由；若信息不足，输出需补充信息清单而不做武断匹配。


            【判定与选择规则（严格执行）】

            A. 流类型（第一优先级）

            若 exchange 表示产品/原料/能源供给或消耗（进入或离开技术系统边界的商品/服务），选择产品流（Product flow）。

            若 exchange 表示环境排放或资源抽取，选择基础流（Elementary flow）。

            依据原始查询的 direction 和语境判定；两类同时出现时，只保留符合语境的一类。

            B. 介质/compartment（仅对基础流，第二优先级）

            文献/过程若明确介质或子类，必须匹配：空气/水/土壤及其子类（如 indoor、urban near ground、high stacks、unspecified
            等）。

            可合理推断时允许推断，并在理由中给出依据：如“室内操作间挥发→air, indoor”，“高架烟囱→air, high stacks”，“废水处理单元→emissions
            to water”等。

            无法确定时使用默认：Air→Emissions to air, unspecified；Water→Emissions to water,
            unspecified；Soil→Emissions to soil, unspecified。

            禁止无依据时选择过度细分的子类。

            C. 单位与 flow property 一致性（第三优先级）

            amount+unit 应与 flowProperties 一致（质量/能量/体积/物质的量等）。若不一致，提示需单位换算或补充信息。

            候选缺少 flowProperties 时，可在名称/介质强一致前提下暂行匹配，但需在结果中提示“数据库需补充 flow property”。

            D. 地理匹配（第四优先级）

            若过程/文献有明确地域，优先 geography 一致的候选；否则 geography=null 或 global。地域冲突时，优先与 process
            的 geography_context 更贴合者。

            E. 版本与数据质量（第五优先级）

            多版本并存时，优先最新稳定版，必要时参考数据年限与代表性，并在理由中简述。

            F. 无匹配处理规则（当所有候选 Flow 均不匹配时）

            name 字段：填入【原始查询的 flow_name】中的 exchangeName。

            generalcomment 字段：追加【原始查询的 flow_name】中的 desc。

            reasoning 字段：标注使用原始查询信息。


            输出要求：

            {"UUID":"","name":"A composite name for the flow, created by concatenating
            the following four components with a semicolon: baseName; treatmentStandardsRoutes;
            mixAndLocationTypes; flowProperties.","process_name":"The name of the
            process to which this flow belongs.","version":"","generalcomment":"","geography":"","classificationInformation":{"common:classification":{"common:class":[{"#text":"","@level":"","@classId":"","reasoning":
            "A detailed explanation of why the model made this choice."}]}}}'
        - id: bf2b29ab-4048-466e-b8a4-c27c7ca0c573
          role: user
          text: '【当前Process信息】

            {{#1757154253960.process_name#}}


            【文献】

            {{#1757154253960.paper#}}


            【原始查询的flow_name】

            {{#1757154253960.flow_name#}}


            【候选Flow列表】

            {{#1758074244330.flows_to_judge#}}'
        selected: false
        structured_output:
          schema:
            properties:
              reasoning:
                description: 模型做出该选择的详细理由。
                type: string
              selected_flow:
                description: 模型选择出的最匹配的Flow对象。
                type: object
            required:
            - selected_flow
            - reasoning
            type: object
        structured_output_enabled: false
        title: glm-mcp
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1757735791088'
      position:
        x: -757.9031766096399
        y: 571.2161465558643
      positionAbsolute:
        x: -757.9031766096399
        y: 571.2161465558643
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nfrom typing import Dict, Any, List\n\ndef get_text_from_list(data_list:\
          \ List[Dict[str, Any]], lang: str = 'en') -> List[str]:\n    \"\"\"\n  \
          \  辅助函数：安全地从 ILCD 列表结构中提取所有指定语言的 #text 值。\n    如果 data_list 不是列表，则返回空列表。\n\
          \    \"\"\"\n    texts = []\n    if not isinstance(data_list, list):\n \
          \       return texts\n    for item in data_list:\n        if isinstance(item,\
          \ dict) and item.get(\"@xml:lang\") == lang and \"#text\" in item:\n   \
          \         texts.append(item[\"#text\"])\n    return texts\n\ndef main(original_query:\
          \ str, mcp_results: List[Dict[str, Any]]) -> Dict[str, Any]:\n    \"\"\"\
          \n    !! V13 版 - 精确提取与转换 !!\n\n    此版本会从 Agent 的完整日志(mcp_results)中向后查找最新一次成功的工具响应，\n\
          \    然后根据用户定义的 6 条精确规则，从原始、复杂的 flowDataSet 结构中提取\n    和组合数据，最终生成简洁的 JSON\
          \ 字符串列表。\n    \"\"\"\n    \n    flows_to_judge_strings: List[str] = []\n\
          \    unmatched_queries_strings: List[str] = []\n    raw_json_string = None\n\
          \n    # 1. 从 Agent 日志末尾向前搜索，找到最新一次成功的工具响应JSON\n    if isinstance(mcp_results,\
          \ list):\n        for log_entry in reversed(mcp_results):\n            try:\n\
          \                response_str = log_entry.get(\"data\", {}).get(\"output\"\
          , {}).get(\"tool_responses\", [{}])[0].get(\"tool_response\")\n        \
          \        if isinstance(response_str, str) and response_str.strip().startswith(\"\
          {\"):\n                    raw_json_string = response_str\n            \
          \        break\n            except (IndexError, AttributeError):\n     \
          \           continue\n\n    # 2. 如果未找到任何有效响应，则将原始查询归为“未匹配”\n    if not raw_json_string:\n\
          \        unmatched_queries_strings.append(original_query)\n        return\
          \ {\n            \"flows_to_judge\": flows_to_judge_strings,\n         \
          \   \"unmatched_queries\": unmatched_queries_strings\n        }\n\n    try:\n\
          \        # 3. 解析工具返回的原始、复杂JSON\n        parsed_data = json.loads(raw_json_string)\n\
          \        flow_list = parsed_data.get(\"data\", [])\n\n        if not flow_list:\n\
          \            # 工具成功返回，但结果列表为空\n            unmatched_queries_strings.append(original_query)\n\
          \        else:\n            # 4. 遍历每一条原始记录，并根据规则提取\n            for flow_item\
          \ in flow_list:\n                flow_data = flow_item.get(\"json\", {}).get(\"\
          flowDataSet\", {})\n                if not flow_data:\n                \
          \    continue\n\n                info = flow_data.get(\"flowInformation\"\
          , {}).get(\"dataSetInformation\", {})\n                admin = flow_data.get(\"\
          administrativeInformation\", {})\n\n                # 规则 1-5: 提取各个字段\n \
          \               uuid = info.get(\"common:UUID\")\n                version\
          \ = admin.get(\"publicationAndOwnership\", {}).get(\"common:dataSetVersion\"\
          )\n                geography = flow_data.get(\"flowInformation\", {}).get(\"\
          geography\")\n                classification = info.get(\"classificationInformation\"\
          )\n                \n                general_comment_list = info.get(\"\
          common:generalComment\", [])\n                en_comments = get_text_from_list(general_comment_list,\
          \ 'en')\n                general_comment = en_comments[0] if en_comments\
          \ else None\n\n                # 规则 6: 组合 Name 字段\n                name_info\
          \ = info.get(\"name\", {})\n                name_parts = []\n          \
          \      name_parts.extend(get_text_from_list(name_info.get(\"baseName\",\
          \ []), 'en'))\n                name_parts.extend(get_text_from_list(name_info.get(\"\
          treatmentStandardsRoutes\", []), 'en'))\n                name_parts.extend(get_text_from_list(name_info.get(\"\
          mixAndLocationTypes\", []), 'en'))\n                name_parts.extend(get_text_from_list(name_info.get(\"\
          flowProperties\", []), 'en'))\n                full_name = \"; \".join(filter(None,\
          \ name_parts)) if name_parts else None\n\n                # 组装成简洁的对象\n \
          \               simplified_flow_object = {\n                    \"UUID\"\
          : uuid,\n                    \"version\": version,\n                   \
          \ \"geography\": geography,\n                    \"classificationInformation\"\
          : classification,\n                    \"generalcomment\": general_comment,\n\
          \                    \"name\": full_name\n                }\n          \
          \      \n                # 将简洁对象序列化为字符串，并添加到输出列表\n                flows_to_judge_strings.append(json.dumps(simplified_flow_object,\
          \ ensure_ascii=False))\n\n    except Exception as e:\n        # 捕获所有解析错误，归为“未匹配”\n\
          \        unmatched_queries_strings.append(original_query)\n\n    # 5. 返回最终结果\n\
          \    return {\n        \"flows_to_judge\": flows_to_judge_strings,\n   \
          \     \"unmatched_queries\": unmatched_queries_strings\n    }"
        code_language: python3
        desc: ''
        outputs:
          flows_to_judge:
            children: null
            type: array[string]
          unmatched_queries:
            children: null
            type: array[string]
        selected: false
        title: 代码执行
        type: code
        variables:
        - value_selector:
          - '1760348527985'
          - text
          value_type: string
          variable: mcp_results
        - value_selector:
          - '1757154253960'
          - flow_name
          value_type: string
          variable: original_query
      height: 53
      id: '1758074244330'
      position:
        x: -1394.2069667638127
        y: 491.7010074358485
      positionAbsolute:
        x: -1394.2069667638127
        y: 491.7010074358485
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: 860266b2-dd12-4a09-a6db-6bcaa1c07002
            value: ''
            varType: array[string]
            variable_selector:
            - '1758074244330'
            - unmatched_queries
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 条件分支 2
        type: if-else
      height: 125
      id: '1758130999431'
      position:
        x: -1072.9713813340318
        y: 491.7010074358485
      positionAbsolute:
        x: -1072.9713813340318
        y: 491.7010074358485
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1760335091488'
          - matched_flows
          value_type: string
          variable: unmatched_queries
        selected: false
        title: 结束 2
        type: end
      height: 89
      id: '1758131027101'
      position:
        x: -439.0652848795163
        y: 211.87765466167366
      positionAbsolute:
        x: -439.0652848795163
        y: 211.87765466167366
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport re\n\ndef find_first_complete_json(text: str):\n\
          \    \"\"\"\n    通过计算配对的括号，从字符串中找到第一个完整的JSON对象。\n    这能有效避免\"Extra data\"\
          错误。\n    \"\"\"\n    start_pos = text.find('{')\n    if start_pos == -1:\n\
          \        return None, -1  # 未找到起始括号\n\n    brace_count = 0\n    for i in\
          \ range(start_pos, len(text)):\n        char = text[i]\n        if char\
          \ == '{':\n            brace_count += 1\n        elif char == '}':\n   \
          \         brace_count -= 1\n        \n        if brace_count == 0:\n   \
          \         # 找到了与第一个'{'匹配的'}'\n            return text[start_pos : i + 1],\
          \ i + 1\n    \n    return None, -1 # 括号不平衡\n\ndef main(arg1: str) -> dict:\n\
          \    \"\"\"\n    V9版最终代码 - 使用精确的括号匹配算法提取JSON，彻底解决\"Extra data\"问题。\n   \
          \ \"\"\"\n    # 步骤 1: 定位并切除 <think>...</think> 思考过程\n    think_end_tag =\
          \ '</think>'\n    think_end_index = arg1.rfind(think_end_tag)\n    \n  \
          \  if think_end_index != -1:\n        content_after_think = arg1[think_end_index\
          \ + len(think_end_tag):]\n    else:\n        content_after_think = arg1\n\
          \n    # 步骤 2: 【关键改动】使用括号匹配算法，精确提取第一个完整的JSON对象\n    json_string, _ = find_first_complete_json(content_after_think)\n\
          \n    if not json_string:\n         # 如果连一个完整的JSON对象都找不到，就报错\n        raise\
          \ ValueError(f\"在<think>标签后未找到一个结构完整的JSON对象。内容预览: '{content_after_think[:200]}...'\"\
          )\n\n    # 步骤 3: 验证并返回结果\n    try:\n        # 验证提取出的字符串确实是有效的JSON\n    \
          \    json.loads(json_string)\n        # 成功后，按要求返回包含该字符串的数组\n        return\
          \ {\"result\": [json_string]}\n    except json.JSONDecodeError as e:\n \
          \       # 如果精确提取后仍然解析失败，说明JSON本身格式有问题\n        raise ValueError(f\"提取出的JSON块格式无效。错误:\
          \ '{e}'. 提取内容: '{json_string[:200]}...'\")"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 代码执行 2
        type: code
        variables:
        - value_selector:
          - '1757735791088'
          - text
          value_type: string
          variable: arg1
      height: 53
      id: '1759133897723'
      position:
        x: -447.15658547001186
        y: 571.2161465558643
      positionAbsolute:
        x: -447.15658547001186
        y: 571.2161465558643
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nfrom typing import List, Dict, Any\n\ndef main(unmatched_queries:\
          \ List[str], originflow: str) -> Dict[str, str]:\n    unmatched_names =\
          \ set()\n    try:\n        for query_str in unmatched_queries:\n       \
          \     # Clean up potentially double-escaped strings\n            cleaned_str\
          \ = query_str.replace('\\\\\"', '\"')\n            query_dict = json.loads(cleaned_str)\n\
          \            name = query_dict.get(\"exchangeName\")\n            if name:\n\
          \                unmatched_names.add(name.strip())\n    except Exception:\n\
          \        # If parsing fails, return an empty list as a string\n        return\
          \ {\"matched_flows\": \"[]\"}\n\n    if not unmatched_names:\n        return\
          \ {\"matched_flows\": \"[]\"}\n\n    try:\n        simplified_flows = json.loads(originflow)\n\
          \        if not isinstance(simplified_flows, list):\n            return\
          \ {\"matched_flows\": \"[]\"}\n    except Exception:\n        return {\"\
          matched_flows\": \"[]\"}\n\n    result_flows = []\n    for flow_object in\
          \ simplified_flows:\n        if not isinstance(flow_object, dict):\n   \
          \         continue\n\n        base_name = flow_object.get(\"baseName\")\n\
          \        \n        if base_name and base_name.strip() in unmatched_names:\n\
          \            result_flows.append(flow_object)\n            \n    # **Key\
          \ Change**: Convert the final list into a JSON string before returning\n\
          \    matched_flows_string = json.dumps(result_flows, ensure_ascii=False)\n\
          \    \n    return {\n        \"matched_flows\": matched_flows_string\n \
          \   }"
        code_language: python3
        desc: ''
        outputs:
          matched_flows:
            children: null
            type: string
        selected: false
        title: 代码执行 3
        type: code
        variables:
        - value_selector:
          - '1758074244330'
          - unmatched_queries
          value_type: array[string]
          variable: unmatched_queries
        - value_selector:
          - '1760348527985'
          - text
          value_type: string
          variable: originflow
      height: 53
      id: '1760335091488'
      position:
        x: -747.579672261593
        y: 211.87765466167366
      positionAbsolute:
        x: -747.579672261593
        y: 211.87765466167366
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        agent_parameters:
          mcp_servers_config:
            type: constant
            value: "{\n  \"TianGong_LCA_Remote\": {\n    \"transport\": \"streamable_http\"\
              ,\n    \"url\": \"https://lcamcp.tiangong.earth/mcp\",\n    \"headers\"\
              : {\n      \"Accept\": \"application/json,text/event-stream\",\n   \
              \   \"Authorization\": \"Bearer eyJlbWFpbCI6IjIyMzAwMDg3QG11Yy5lZHUuY24iLCJwYXNzd29yZCI6IiFxZCZINDIxIn0=\"\
              \n    },\n    \"timeout\": 50,\n    \"sse_read_timeout\": 50\n  }\n}"
          model:
            type: constant
            value:
              completion_params:
                enable_stream: false
              mode: chat
              model: gpt-5-mini
              model_type: llm
              provider: langgenius/openai/openai
              type: model-selector
          query:
            type: constant
            value: '1. 使用{{#1757154253960.flow_name#}}作为 `query` 参数，调用 `Search_flows_Tool`。

              2. 对工具返回的每一条候选流，执行以下验证。必须满足所有条件：候选流的 `baseName` 必须与原始查询中的 `exchangeName`
              高度相似或完全一致。原始查询 `desc` 中所有关键技术限定词（例如专有名称、特定化学组分、特殊工艺、物理特性等）必须在候选流的描述（`generalComment`）或名称中找到明确的对应。

              3. 如果所有候选项都不满足条件（工具直接返回空数据，或返回的所有候选项均未通过验证），则必须构造并输出一个包含单个JSON对象的数组。该对象必须包含以下字段："baseName":
              值为原始查询{{#1757154253960.flow_name#}}中的exchangeName。"generalComment":
              值为原始查询{{#1757154253960.flow_name#}}中的desc。"status": 值为字符串 "requires_creation","process_name":值为{{#1757154253960.process_name#}}。所有其他字段（UUID,
              treatmentStandardsRoutes, mixAndLocationTypes, flowProperties, version,
              geography, classificationInformation）的值均为null。

              如果存在一个或多个通过验证的候选流，仅对这些通过验证的流执行以下格式化指令，并以JSON数组格式输出：1.提取字段: UUID, baseName,
              treatmentStandardsRoutes, mixAndLocationTypes, flowProperties, version,
              generalComment, geography, classificationInformation。2. 严格扁平结构，禁止创建嵌套对象。3.
              缺失字段用`null`填充。


              示例输出：

              [{"UUID":"...","baseName":"...",...}, ...]'
        agent_strategy_label: FunctionCalling (支持 MCP 工具)
        agent_strategy_name: mcp_sse_function_calling
        agent_strategy_provider_name: junjiem/mcp_see_agent/mcp_see_agent
        desc: ''
        meta:
          minimum_dify_version: null
          version: 0.0.1
        output_schema: null
        plugin_unique_identifier: junjiem/mcp_see_agent:0.2.4@82caf96890992e9dec2c43c3fac82bfce8bd18a41de7c2b6948151b2d7f7b7a2
        selected: true
        title: Agent
        tool_node_version: '2'
        type: agent
      height: 145
      id: '1760348527985'
      position:
        x: -1744.536856017004
        y: 491.7010074358485
      positionAbsolute:
        x: -1744.536856017004
        y: 491.7010074358485
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: 2398.449071161085
      y: 277.8376809984811
      zoom: 0.977159931489649
